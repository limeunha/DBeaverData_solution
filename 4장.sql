-------------------1. 서브쿼리------------------------------
--스칼라 서브 쿼리
SELECT T1.STUDENT_NO,
       (SELECT T2.STUDENT_NAME
        FROM ACADEMY_B T2
        WHERE T2.STUDENT_NO = T1.STUDENT_NO) AS NAME 
FROM ACADEMY_A T1;

--인라인 뷰

SELECT T1.STUDENT_NO, T2.STUDENT_NAME
FROM ACADEMY_A T1,
       (SELECT STUDENT_NO, STUDENT_NAME
        FROM ACADEMY_B) T2
WHERE T1.STUDENT_NO = T2.STUDENT_NO; 

--비연관 서브쿼리
SELECT * 
FROM ACADEMY_A
WHERE STUDENT_NAME = (SELECT STUDENT_NAME 
                      FROM ACADEMY_B 
                      WHERE STUDENT_NO = 1003);

--연관 서브쿼리
SELECT STUDENT_NO
FROM ACADEMY_A T1
WHERE STUDENT_NAME = (SELECT T2.STUDENT_NAME
                      FROM ACADEMY_B T2
                      WHERE T2.STUDENT_NO = T1.STUDENT_NO);
                      
                      
--단일행 서브쿼리
SELECT * 
FROM ACADEMY_A
WHERE STUDENT_NAME = (SELECT STUDENT_NAME 
                      FROM ACADEMY_B 
                      WHERE STUDENT_NO = 1003);

--다중행 서브쿼리
--에러발생(다중행을 나타낼때는 부등호 사용 불가)
SELECT * 
FROM ACADEMY_A
WHERE STUDENT_NAME = (SELECT STUDENT_NAME 
                      FROM ACADEMY_B 
                      WHERE STUDENT_NO = 1003 OR STUDENT_NO = 1004);
                      
SELECT * 
FROM ACADEMY_A
WHERE STUDENT_NAME IN (SELECT STUDENT_NAME 
                      FROM ACADEMY_B 
                      WHERE STUDENT_NO = 1003 OR STUDENT_NO = 1004);
                    
--다중 컬럼 서브쿼리
SELECT * 
FROM ACADEMY_A
WHERE (STUDENT_NAME, STUDENT_NO) IN (SELECT STUDENT_NAME, STUDENT_NO 
                                     FROM ACADEMY_B 
                                     WHERE STUDENT_NO = 1003 OR STUDENT_NO = 1004);

---------------------------------------------------------




-------------------2. 뷰------------------------------

--뷰 생성

CREATE OR REPLACE VIEW ACADEMY_ALL AS 
SELECT * FROM ACADEMY_A;

CREATE OR REPLACE VIEW ACADEMY_SUDENT_NAME AS 
SELECT STUDENT_NAME FROM ACADEMY_A;

--무결성 제약조건 중 개체 무결성 무시(기본키는 UNIQUE, NOT NULL)
INSERT INTO ACADEMY_SUDENT_NAME VALUES('김하서');

CREATE OR REPLACE VIEW ACADEMY_JOIN AS 
SELECT T1.STUDENT_NO, T1.STUDENT_NAME 
FROM ACADEMY_A T1, ACADEMY_B T2
WHERE T1.STUDENT_NO = T2.STUDENT_NO;

--뷰 삭제
DROP VIEW ACADEMY_JOIN;

--에러가 나는 뷰(가상의 테이블을 만드는 것이므로 중복된 컬럼이 선택되지 않도록 주의)
CREATE OR REPLACE VIEW ACADEMY_JOIN AS 
SELECT * 
FROM ACADEMY_A T1, ACADEMY_B T2
WHERE T1.STUDENT_NO = T2.STUDENT_NO;

---------------------------------------------------------


-------------------3. GROUP BY, HAVING, ORDER BY------------------------------

SELECT TYPE, COUNT(NAME) AS COUNT FROM GIFT GROUP BY TYPE HAVING COUNT(NAME)>=2 ORDER BY TYPE DESC;

---------------------------------------------------------



-------------------4. 윈도우 함수------------------------------
-- 성적 테이블 작성
CREATE TABLE STUDENT_GRADE
(
	STUDENT_ID NUMBER PRIMARY KEY,
	STUDENT_NAME VARCHAR2(20) NOT NULL,
	SCORE NUMBER NOT NULL
);

-- 힉생 성적 데이터 입력
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (1, '이름 1', 391);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (2, '이름 2', 489);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (3, '이름 3', 437);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (4, '이름 4', 339);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (5, '이름 5', 493);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (6, '이름 6', 361);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (7, '이름 7', 470);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (8, '이름 8', 456);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (9, '이름 9', 417);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (10, '이름 10', 391);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (11, '이름 11', 461);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (12, '이름 12', 298);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (13, '이름 13', 443);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (14, '이름 14', 426);
INSERT INTO STUDENT_GRADE (STUDENT_ID, STUDENT_NAME, SCORE) VALUES (15, '이름 15', 383);

TRUNCATE TABLE STUDENT_GRADE;
SELECT * FROM STUDENT_GRADE;

SELECT STUDENT_NAME, RANK() OVER(ORDER BY SCORE DESC) FROM STUDENT_GRADE;
SELECT STUDENT_NAME, DENSE_RANK() OVER(ORDER BY SCORE DESC) FROM STUDENT_GRADE;
SELECT STUDENT_NAME, ROW_NUMBER() OVER(ORDER BY SCORE DESC) FROM STUDENT_GRADE;

SELECT TYPE, COUNT(NAME) AS COUNT FROM GIFT GROUP BY TYPE; --건수
SELECT TYPE, SUM(price) AS SUM FROM GIFT GROUP BY TYPE; --합계
SELECT TYPE, AVG(price) AS AVG FROM GIFT GROUP BY TYPE; --평균
SELECT TYPE, MAX(price) AS MAX FROM GIFT GROUP BY TYPE; --최댓값
SELECT TYPE, MIN(price) AS MIN FROM GIFT GROUP BY TYPE; --최소값

SELECT TYPE, PRICE, SUM(PRICE) OVER(PARTITION BY TYPE) AS P FROM GIFT;

---------------------------------------------------------



-------------------5. 시퀀스------------------------------

--emp 테이블 초기화
DROP TABLE EMP;

CREATE TABLE EMP (
    NO   NUMBER,
    NAME VARCHAR2(20),
    AGE  NUMBER
);


CREATE SEQUENCE EMP_SEQ
       INCREMENT BY 1
       START WITH 1
       MINVALUE 1
       MAXVALUE 9999
       NOCYCLE
       NOCACHE
       NOORDER;
       
       
SELECT EMP_SEQ.NEXTVAL
FROM DUAL;

SELECT EMP_SEQ.CURRVAL
FROM DUAL;

--시퀀스 현재 값 변경(꼼수)
--현재 시퀀스값은 6인데 데이터값을 11부터 시작 할 경우----
ALTER SEQUENCE EMP_SEQ INCREMENT BY 4;

SELECT EMP_SEQ.NEXTVAL
FROM DUAL;

ALTER SEQUENCE EMP_SEQ INCREMENT BY 1;
------------------------------------------------------

ALTER SEQUENCE EMP_SEQ INCREMENT BY 2;
ALTER SEQUENCE EMP_SEQ MAXVALUE 99999;

INSERT INTO EMP VALUES (EMP_SEQ.NEXTVAL, '둘리', 10);
INSERT INTO EMP VALUES (EMP_SEQ.NEXTVAL, '또치', 10);
INSERT INTO EMP VALUES (EMP_SEQ.NEXTVAL, '고길동', 10);

TRUNCATE table emp;

DROP SEQUENCE EMP_SEQ;
---------------------------------------------------------